{"version":3,"sources":["components/Loader.js","components/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","className","Card","props","idValue","useState","character","setCharacter","loading","setLoading","a","axios","get","response","data","useEffect","getCharacter","src","image","alt","name","status","species","undefined","origin","location","App","setIdValue","randomValue","Math","floor","random","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAEe,SAASA,IACpB,OACI,sBAAKC,UAAU,WAAf,UACI,wBACA,wBACA,2BCoCGC,MAvCf,SAAcC,GAAO,IACbC,EAAWD,EAAXC,QADY,EAEeC,mBAAS,IAFxB,mBAEZC,EAFY,KAEDC,EAFC,OAGWF,oBAAS,GAHpB,mBAGZG,EAHY,KAGHC,EAHG,iDASnB,4BAAAC,EAAA,6DACCD,GAAW,GADZ,SAEsBE,IAAMC,IAAN,oDAAuDR,IAF7E,OAEKS,EAFL,OAGCJ,GAAW,GACXF,EAAaM,EAASC,MAJvB,4CATmB,sBAenB,OAVAC,qBAAW,WACPX,GANe,mCAMNY,KACV,CAACZ,IASJ,qBAAKH,UAAY,iBAAjB,SAECO,EACA,sBAAKP,UAAY,SAAjB,UAA0B,cAACD,EAAD,IAA1B,OACE,qCACF,qBAAKC,UAAY,gBAAjB,SACC,qBAAKgB,IAAKX,EAAUY,MAAOC,IAAOb,EAAUc,SAE7C,sBAAKnB,UAAY,iBAAjB,UACC,oBAAIA,UAAY,aAAhB,SAA8BK,EAAUc,OACxC,oBAAGnB,UAAY,kBAAf,UAAkCK,EAAUe,OAA5C,MAAuDf,EAAUgB,WACjE,oBAAGrB,UAAY,kBAAf,UAAiC,mBAAGA,UAAY,8BAAhD,eACA,mBAAGA,UAAY,YAAf,cAAiDsB,IAArBjB,EAAUkB,OAAuB,YAAclB,EAAUkB,OAAOJ,OAC5F,oBAAGnB,UAAY,kBAAf,UAAiC,mBAAGA,UAAY,8BAAhD,4BACA,mBAAGA,UAAY,YAAf,cAAmDsB,IAAvBjB,EAAUmB,SAAyB,YAAcnB,EAAUmB,SAASL,gBCVpFM,MAnBf,WAAgB,IAAD,EAEiBrB,mBAAS,MAF1B,mBAEND,EAFM,KAEGuB,EAFH,KAGbZ,qBAAW,WACTa,MACC,IACH,IAAMA,EAAc,WAClBD,EAAWE,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAE/C,OACE,sBAAK9B,UAAY,gBAAjB,UACE,wBAAQA,UAAY,gBAAgB+B,QAAWJ,EAA/C,SACE,mBAAG3B,UAAY,qBAEjB,cAAC,EAAD,CAAMG,QAAWA,QCPR6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.722fe295.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Loader() {\r\n    return (\r\n        <div className=\"lds-ring\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport Loader from './Loader'\r\n\r\nfunction Card(props){\r\n\tconst {idValue} = props\r\n\tconst [character, setCharacter] = useState({})\r\n\tconst [loading, setLoading] = useState(false)\r\n\r\n\tuseEffect( () => {\r\n\t\tif(idValue) getCharacter()\r\n\t}, [idValue])\r\n\r\n\tasync function getCharacter(){\r\n\t\tsetLoading(true)\r\n\t\tlet response = await axios.get(`https://rickandmortyapi.com/api/character/${idValue}`)\r\n\t\tsetLoading(false)\r\n\t\tsetCharacter(response.data)\r\n\t}\r\n\treturn (\r\n\t<div className = \"card-container\">\r\n\t\t{\r\n\t\tloading ? \r\n\t\t<div className = \"loader\"><Loader></Loader> </div>\r\n\t\t: <>\r\n\t\t<div className = \"img-container\">\r\n\t\t\t<img src={character.image} alt = {character.name} />\r\n\t\t</div>\r\n\t\t<div className = \"info-container\" >\r\n\t\t\t<h2 className = \"name-title\">{character.name}</h2>\r\n\t\t\t<p className = \"info-text first\">{character.status} - {character.species}</p>\r\n\t\t\t<p className = \"info-text-title\"><i className = \"fa fa-globe-americas mr-2\"></i>Origin : </p>\r\n\t\t\t<p className = \"info-text\">{character.origin === undefined ? 'Undefined' : character.origin.name}</p>\r\n\t\t\t<p className = \"info-text-title\"><i className = \"fa fa-map-marker-alt mr-2\"></i>Last known location : </p>\r\n\t\t\t<p className = \"info-text\">{character.location === undefined ? 'Undefined' : character.location.name}</p>\r\n\t\t</div>\r\n\t\t</>\r\n\t\t}\r\n\t</div>\r\n\r\n\t)\r\n\t\r\n}\r\nexport default Card;","\r\nimport './App.css';\r\nimport Card from './components/Card'\r\nimport {useEffect, useState} from 'react'\r\n\r\nfunction App() {\r\n\r\n  const [idValue, setIdValue] = useState(null)\r\n  useEffect( () => {\r\n    randomValue()\r\n  }, [])\r\n  const randomValue = () => {\r\n    setIdValue(Math.floor(Math.random() * 200) + 1)\r\n  }\r\n  return (\r\n    <div className = \"container-app\">\r\n      <button className = \"change-button\" onClick = {randomValue}>\r\n        <i className = \"fa fa-sync-alt\"></i>\r\n      </button>\r\n      <Card idValue = {idValue}></Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}